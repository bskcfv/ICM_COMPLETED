/*Objetivo Calcular IMC*/
CREATE OR REPLACE FUNCTION f_imc()
RETURNS TRIGGER AS $$
BEGIN
-- Reglas de Validacion
IF NEW.CC <= 0 THEN
RAISE EXCEPTION 'CC Debe ser Mayor de 0';
END IF;
IF NEW.PESO <= 0 THEN
RAISE EXCEPTION 'El Peso debe Ser mayor de 0.';
END IF;
IF NEW.ESTATURA <= 0 THEN
RAISE EXCEPTION 'La Estatura debe ser mayor de 0.';
END IF;
IF NEW.EDAD NOT BETWEEN 1 AND 100 THEN
RAISE EXCEPTION 'Digite una Edad Valida';
END IF;

-- Calcular IMC Y actualizar el IMC
NEW.IMC := NEW.PESO / POWER((NEW.ESTATURA/100),2);
-- Determinar CLASIFICACION
IF NEW.IMC < 18.49 THEN 
NEW.CLASIFICACION := 'PESO BAJO';
ELSIF NEW.IMC BETWEEN 18.50 AND 24.99 THEN
NEW.CLASIFICACION := 'PESO NORMAL';
ELSIF NEW.IMC BETWEEN 25 AND 29.99 THEN
NEW.CLASIFICACION := 'SOBREPESO';
ELSIF NEW.IMC BETWEEN 30 AND 34.99 THEN
NEW.CLASIFICACION := 'OBESIDAD LEVE';
ELSIF NEW.IMC BETWEEN 35 AND 39.99 THEN
NEW.CLASIFICACION := 'OBESIDAD MEDIA';
ELSIF NEW.IMC > 40 THEN
NEW.CLASIFICACION := 'OBESIDAD MORBIDA';
END IF;

RETURN NEW; 
END; 
$$ LANGUAGE plpgsql;

/*Objetivo: Actualizar Registros y Mostrarlos*/
CREATE OR REPLACE FUNCTION f_imc_client(
v_cc INTEGER,
v_peso DECIMAL(5,2),
v_estatura DECIMAL(5,2)
)
RETURNS TABLE(NOMBRE TEXT, IMC DECIMAL(5,2), CLASIFICACION TEXT) AS $$
BEGIN
-- Update Usuario 
UPDATE USERS
SET PESO = v_peso, ESTATURA = v_estatura
WHERE CC = v_cc;
-- Retornar Query Con Info Necesaria
RETURN QUERY
SELECT U.NOMBRE AS NOMBRE,
U.IMC AS IMC,
U.CLASIFICACION AS CLASIFICACION
FROM USERS AS U
WHERE U.CC = v_cc;
END;
$$ LANGUAGE plpgsql;


/*Trigger*/

CREATE OR REPLACE TRIGGER trigger_ims
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
EXECUTE FUNCTION f_imc();

